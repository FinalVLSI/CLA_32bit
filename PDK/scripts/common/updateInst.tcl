#########################################################################
#
# This file and the associated documentation are confidential 
# and proprietary to Synopsys, Inc. 
#
# Copyright (c), 2010 Synopsys, Inc. All rights reserved.
#
# DISCLAIMER
# The information contained herein is provided by Synopsys, Inc. on 
# an "AS IS" basis without any warranty, and Synopsys has no obligation 
# to support or otherwise maintain the information.
#
# Synopsys, Inc. disclaims any representation that the information 
# does not infringe any intellectual property rights or proprietary
# rights of any third parties. There are no other warranties given by
# Synopsys, whether express, implied or statutory, including, without
# limitation, implied warranties of merchantability and fitness for a
# particular purpose.
#
# Synopsys, Inc. reserves the right to make changes to the information 
# at any time and without notice.
#
#########################################################################
#
#	Change Log:
#
#	20 Feb 07 : Adding First version
#	25 Mar 10 : Updated with closing the design after the update.
##########################################################################

################################################################################################
# updateInst: will update the CDF values on the instance with never version of PDK by 
#            exectuting the callback on the instances
#
# USAGE:
#	updateInst [<libName>] [<cellName>] [<ViewType>]
#
#  1. updateInst <libName> <cellName> <viewType>
#	This will trigger the callback placed in the view type of the given library name and cell name
#
#  2. updateInst <libName> <cellName>
#  	This will trigger the callback placed in both schematic and layout viewtypes (if exist)
#
#  3. updateInst <libName>
#	This option will trigger the callback placed in all the cells of the given library
#
#  4. updateInst 
#	This option triggers the callback on the design that is open
#
################################################################################################

proc updateInst { args } {
    set arg [llength $args]
    set FP [open "updateInst.log" a]
    puts $FP "\n\n\tThis log file is auto generated by updateInst\n\n"
    set time1 [exec date]
    puts $FP "Start time : $time1"
    puts $FP "\n\n Here are the list of devices and callback triggered for the options specified\n\n"
    switch $arg {
	1  {
		set libName  [lindex $args 0]
		puts $FP "The updateInst is run for library : \"$libName\"\n\ndevice   : callback\n--------------------------\n"
		set allCells [_listFiles $libName]
		foreach cell $allCells {
		    set view [dm::findCellView schematic -cellName $cell -libName $libName ]
		    if {![catch {set design [de::open $view -headless true]} errmsg]} {
		        _call_callback $view $FP
		    }
		
	    	    set view [dm::findCellView layout -cellName $cell -libName $libName ]
		    if {![catch {set design [de::open $view -headless true]} errmsg]} {
		        _call_callback $view $FP
		    } 
                }
	}
	
	2 {
		puts $FP "The updateInst is run for library : \"[lindex $args 0]\" and cellName : \"[lindex $args 1]\"\n\ndevice   : callback\n\
		--------------------------\n"
		set view [dm::findCellView schematic -cellName [lindex $args 1] -libName [lindex $args 0] ]
		if {![catch {set design [de::open $view -headless true]} errmsg]} {
		    _call_callback $view $FP
		}
		
		set view [dm::findCellView layout -cellName [lindex $args 1] -libName [lindex $args 0] ]
		if {![catch {set design [de::open $view -headless true]} errmsg]} {
		   _call_callback $view $FP
		}    
		
	}

	3 {
		puts $FP "The updateInst is run for library: \"[lindex $args 0]\" , cellName: \"[lindex $args 1]\" and CellView: \"[lindex $args 2]\"\n\ndevice   : \
		callback\n --------------------------\n"
		set view [dm::findCellView [lindex $args 2] -cellName [lindex $args 1] -libName [lindex $args 0] ]
		_call_callback $view $FP
	}

	default {
		set insts [db::getInsts -of [db::getAttr editDesign -of [de::getActiveContext]]]
		db::foreach inst $insts { 
                    if { ![catch {set res [db::evalCallback  [db::getAttr callback -of [db::getParamDefs m -of $inst]] -of $inst -param m]} errmsg]} {
		        puts $FP "[db::getAttr cellName -of $inst]  : [db::getAttr callback -of [db::getParamDefs m -of $inst]] .. done"
                    } else {
                          puts $FP "$errmsg"
                    }
                }

       }
    }
    set time2 [exec date]
    puts $FP "\n\nEnd time : $time2"
    puts "\n\nupdateInst is finished, please took at updateInst.log file for details\n\n"
    puts $FP "\n----------------------------------------------------------------------\n\n"
    close $FP
}
#
# Used to Trigger the callback by updateInst procedure
#
proc _call_callback { view FP } {
	set des [de::open $view -headless true]
	set design [db::getAttr editDesign -of $des]
	set insts [db::getInsts -of $design]
	db::foreach inst $insts { 
            if { ![catch {set res [db::evalCallback  [db::getAttr callback -of [db::getParamDefs m -of $inst]] -of $inst -param m]} errmsg]} {
	        puts $FP "[db::getAttr cellName -of $inst]  \t: [db::getAttr callback -of [db::getParamDefs m -of $inst]] .. done"
            } else {
                puts $FP "$errmsg"
            }
        }
   de::save [db::createCollection $design]
   de::close [db::createCollection $des]
}

#
# Returns the list of the cells in the specified library, the below procedure is used by updateInst
#

proc _listFiles {path} {
   exec ls $path | cat > file_list.txt
   set pth [open "file_list.txt" r]
   while { [gets $pth line] > 0 } {
        if {$line != "data.dm" && $line != "tech.db" && $line != ".oalib"} {
           lappend line_final $line
        }
   }
   close $pth
   exec rm -rf file_list.txt
   return $line_final
}
